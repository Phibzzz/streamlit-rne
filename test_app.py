"""
Script de test pour v√©rifier le bon fonctionnement de l'application avec tous les types d'√©lus
"""

import pandas as pd
from data.loader import load_data_by_type, preprocess_data, load_coords_cache
from config.settings import ELUS_CONFIG

def test_elu_type(elu_type):
    """Test le chargement et le pr√©traitement pour un type d'√©lu"""
    print(f"\n=== Test {elu_type.upper()} ===")
    
    try:
        # Chargement des donn√©es
        df = load_data_by_type(elu_type)
        print(f"‚úÖ Chargement r√©ussi: {len(df)} lignes, {len(df.columns)} colonnes")
        
        # Affichage des colonnes
        print("Colonnes disponibles:")
        for i, col in enumerate(df.columns, 1):
            print(f"  {i}. {col}")
        
        # Test du pr√©traitement
        commune_cache = load_coords_cache("commune_coords_cache.json")
        dept_cache = load_coords_cache("dept_coords_cache.json")
        
        df_processed = preprocess_data(df, commune_cache, dept_cache)
        print(f"‚úÖ Pr√©traitement r√©ussi: {len(df_processed)} lignes")
        
        # V√©rification des coordonn√©es
        has_commune_coords = 'Latitude_Commune' in df_processed.columns and df_processed['Latitude_Commune'].notna().any()
        has_dept_coords = 'Latitude_Dept' in df_processed.columns and df_processed['Latitude_Dept'].notna().any()
        
        print(f"Coordonn√©es communes: {'‚úÖ' if has_commune_coords else '‚ùå'}")
        print(f"Coordonn√©es d√©partements: {'‚úÖ' if has_dept_coords else '‚ùå'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Test tous les types d'√©lus"""
    print("üß™ Test de l'application multi-√©lus")
    print("=" * 50)
    
    results = {}
    for elu_type in ELUS_CONFIG.keys():
        results[elu_type] = test_elu_type(elu_type)
    
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    for elu_type, success in results.items():
        status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
        name = ELUS_CONFIG[elu_type]["name"]
        print(f"{status} - {name}")
    
    total_success = sum(results.values())
    total_tests = len(results)
    print(f"\nR√©sultat global: {total_success}/{total_tests} tests r√©ussis")
    
    if total_success == total_tests:
        print("üéâ Tous les tests sont pass√©s avec succ√®s !")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©.")

if __name__ == "__main__":
    main() 